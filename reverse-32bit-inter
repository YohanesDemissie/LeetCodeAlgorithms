/*
Given a 32-bit signed integer, reverse digits of an integer.
Example 1:
Input: 123
Output: 321
Example 2:
Input: -123
Output: -321
Example 3:
Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
*/

var reverse = function(x) {
    let i = 0;
    let split = x.toString().split('')
    let j = split.length - 1
    do {
        let holder = split[i]
        split[i] = split[j];
        split[j] = holder;
        i++;
        j--;
    }
    while (i < j); 
    
    let joined = split.join('');
    for(let i = 0; i < split.length; i++) {
        if(split[i] === '-') {
        let final = split.splice(i, 1);
        }
    }
    
    let answer = split.join('')
    if(answer > 0x7FFFFFFF) {
        return 0
    } else {
        return x > 0 ?  parseInt(answer) : parseInt(-Math.abs(answer))
    }
};

// This is a linear solution with a time and space complexity of 0(n)
